(define (scale-tree tree factor)
  (cond ((null? tree) '())
	((not (pair? tree)) (* tree factor))
	(else (cons (scale-tree (car tree) factor)
		    (scale-tree (cdr tree) factor)))))
(define (scale-map-tree tree factor)
  (map (lambda(sub-tree)
	 (if (pair? sub-tree)
	   (scale-map-tree sub-tree factor)
	   (* sub-tree factor)))
       tree))
(display (scale-tree (list 1 2) 10)) (newline)
(display (scale-map-tree (list 1 2) 10)) (newline)

(define (square-tree tree)
  (cond ((null? tree) '())
	((not (pair? tree)) (* tree tree))
	(else (cons (square-tree (car tree))
		    (square-tree (cdr tree))))))
(define (square-map-tree tree)
  (map (lambda (sub-tree)
	 (if (pair? sub-tree)
	   (square-tree sub-tree)
	   (* sub-tree sub-tree)))
       tree))

(display (square-tree (list 1 
			    (list 2 (list 3 4) 5)
			    (list 6 7)))) (newline)
(display (square-tree (list 1 2 3 4 5))) (newline)
(display (square-map-tree (list 1 2 3 4 5))) (newline)
